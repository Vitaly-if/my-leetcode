/**
Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
**/
class Solution {
    fun singleNumber(nums: IntArray): Int {      
     var mask = 0
        for(i in nums) {
           mask = mask xor i
        }      
      return mask
    }
}
class Solution {
    fun singleNumber(nums: IntArray): Int {
      
          for(i in 0..nums.size-1) {
            val temp = nums[i]
            nums[i] = -1000000000
           if (nums.contains(temp)) {              
               nums[i] = temp               
             }           
              else 
              return temp
        }
      return 333
    }
}
