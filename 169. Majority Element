/**Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:
Input: nums = [3,2,3]
Output: 3
Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2*/
class Solution {
    fun majorityElement(nums: IntArray): Int {
        var candidate = 0
        var vote = 0
        for (num in nums) {
            if (vote == 0)
                candidate = num
            if (num == candidate)
                vote += 1
            else
                vote -= 1 }       
        return candidate
    }
}
fun majorityElement(nums: IntArray): Int {
	 var major = 0
	 nums.fold(0) { acc, n ->
		 if (acc == 0) major = n
		 acc + if (n == major) 1 else -1
	 }
	 return major
}
fun majorityElement(ar: IntArray) = ar.sorted()[ar.size / 2]
or

fun majorityElement(ar: IntArray) = ar.find { n -> ar.count { it == n } > ar.size / 2 }
class Solution {
    fun majorityElement(nums: IntArray): Int {
        val thresholdNumber = nums.size/2
        val countMap = hashMapOf<Int, Int>()
        
        for(value: Int in nums){
            if(countMap.containsKey(value)){
                val frequency: Int = countMap?.get(value) ?: 0
                countMap.put(value, frequency+1)
            }else{
                countMap.put(value, 1)
            }
        }
        
        for(value in nums){
            val frequency: Int = countMap?.get(value) ?: 0
            if(frequency > thresholdNumber) return value
        }
        
        return 0
    }
}
