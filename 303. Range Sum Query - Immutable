/**
Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
Example 1:

Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3**/

class NumArray(nums: IntArray) {
    val list = mutableListOf<Int>()
   // var list = matableListOf<Int>()
   var current_sum = 0
    val nums = nums
    init {
    for (i in nums) {
        current_sum += i
        list.add(current_sum)
    }
    println(list)
    }
    fun sumRange(left: Int, right: Int): Int {
       
       if ( left == 0)
       return list[right]
        println(list[left-1])
       return list[right] - list[left - 1]
    }



class NumArray(nums: IntArray) {
var nums1 = nums
    fun sumRange(left: Int, right: Int): Int {
        var sum = 0
        for (i in left..right) {
          sum = sum + nums1[i]  
        }
        
        return sum
    }

}
