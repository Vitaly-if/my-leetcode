Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].
Example 2:


Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]
/**
 * Example:
 * var ti = TreeNode(5)
 
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
 class Solution {
fun averageOfLevels(root: TreeNode?): DoubleArray {
var ans: MutableList = ArrayList()
if (root == null) {
return ans.toDoubleArray()
}
val q: Queue = LinkedList()
q.add(root)

    while (!q.isEmpty()) {
        var size: Int = q.size
        var sum = 0.0
        for (i in 0 until size) {
            val temp: TreeNode = q.poll()
            sum = sum + temp.`val`
            if (temp.left != null) {
                q.add(temp.left)
            }
            if (temp.right != null) {
                q.add(temp.right)
            }
        }
        ans.add((sum / size))
       
    }
    return ans.toDoubleArray()
}
}
class Solution {
    fun averageOfLevels(root: TreeNode?): DoubleArray {
        var ans: MutableList<Double> = ArrayList()
        if (root == null) {
            return ans.toDoubleArray()
        }
        val q: Deque<TreeNode> = LinkedList()
        q.add(root)

        while (!q.isEmpty()) {
            var size: Int = q.size
            var sum = 0.0
            for (i in 0 until size) {
                val temp: TreeNode = q.pollFirst()
                sum = sum + temp.`val`
                if (temp.left != null) {
                    q.add(temp.left)
                }
                if (temp.right != null) {
                    q.add(temp.right)
                }
            }
            ans.add((sum / size))
           
        }
        return ans.toDoubleArray()
    }
}
