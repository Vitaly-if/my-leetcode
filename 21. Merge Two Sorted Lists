/**
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list. 

Example 1:

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]**/
/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */
class Solution {
    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {
       var merged = ListNode(0)
       var result = merged
       var list1 = list1
       var list2 = list2
        while((list1!=null)&&(list2!=null)) {
            if (list1.`val` < list2.`val`) {
             merged.next = ListNode(list1.`val`)
             list1 = list1.next }
            else {
                merged.next = ListNode(list2.`val`)
                list2 = list2.next
            }
            merged = merged.next
        }
        while(list1!=null) {
             merged.next = ListNode(list1.`val`)
             list1 = list1.next 
             merged = merged.next}
        while(list2!=null) {
             merged.next = ListNode(list2.`val`)
             list2 = list2.next 
             merged = merged.next}
        return result.next
    }
}

class Solution {
    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {
        if(list1 == null && list2 == null){return null}
        if(list1 == null && list2 != null){return list2}
        if(list1 != null && list2 == null){return list1}
        
        var next1 = list1
        var next2 = list2
        var firstVal: Int
        
        if(next1!!.`val` >= next2!!.`val`){
            firstVal = next2?.`val`
            next2 = next2.next
        }else{
            firstVal = next1?.`val`
            next1 = next1.next
        }
        
        var next3 = ListNode(firstVal)
        var list3Start = next3

        while (next1!= null || next2!= null){
            if(next1== null){
                next3.next = next2
                break
            }
            if(next2== null){
                next3.next = next1
                break
            }
            if(next1!!.`val` >= next2!!.`val`){
                next3.next = ListNode(next2?.`val`)
                next3 = next3.next
                next2 = next2.next
            }else{
                next3.next = ListNode(next1?.`val`)
                next3 = next3.next
                next1 = next1.next 
            }
        }        
        
        return list3Start
    }
}
