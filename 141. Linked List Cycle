/**
Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.**/

/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 */

class Solution { //work
    fun hasCycle(head: ListNode?): Boolean {
        
var tortoise = head
var hare = head
do {
    tortoise = tortoise?.next ?: return false
    hare = hare?.next?.next ?: return false
} while(tortoise != hare)
return true
}
}


fun hasCycle(head: ListNode?): Boolean {//not work
            var slow = head
            var fast = head

            if (head == null || head.next == head)
                return false
            
            while (fast != null) {
                fast = fast.next?.next
                slow = slow?.next
                if (fast == slow)
                    return true
            }
            return false
        }
        
        
fun hasCycle(head: ListNode?): Boolean {// work
    if (head == null) return false

    tailrec fun iterate(fast: ListNode?, lazy: ListNode?): Boolean =
        if (fast == null || lazy == null)
            false
        else if (fast == lazy)
            true
        else
            iterate(fast = fast.next?.next, lazy = lazy.next)

    return iterate(fast = head.next?.next, lazy = head)
}
