/**Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 */
 class Solution {
    fun productExceptSelf(nums: IntArray): IntArray {
       var prod = 1
        val ans = IntArray(nums.size) { 1 }
        for(i in 0 until nums.size) {            
            ans[i] = prod
            prod *= nums[i]
        }        
        prod = 1        
        for(i in nums.size-1 downTo 0) {            
            ans[i] *= prod
            prod *= nums[i]
        }        
        return ans        
    }
}
class Solution {
    fun productExceptSelf(nums: IntArray): IntArray {
        val numsSize = nums.size
        val output = IntArray(numsSize)
        var leftMultiple = 1
        for ((index, num) in nums.withIndex()) {
            output.set(index, leftMultiple)
            leftMultiple *= num
        }
        var rightMultiple = 1
        for ((index, num) in nums.toList().asReversed().withIndex()) {
            val complementIndex = numsSize - index - 1
            val leftMultiple = output.get(complementIndex)
            output.set(complementIndex, leftMultiple * rightMultiple)
            rightMultiple *= num
        }
        return output
    }
}
