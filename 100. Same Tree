Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value. 

Example 1:

Input: p = [1,2,3], q = [1,2,3]
Output: true
Example 2:

Input: p = [1,2], q = [1,null,2]
Output: false
Example 3:


Input: p = [1,2,1], q = [1,1,2]
Output: false

/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
 
 class Solution {//recurse
    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {
     if (p == null && q == null) return true

    if (p?.`val` == q?.`val`) {
       return isSameTree(p?.left, q?.left) && isSameTree(p?.right, q?.right)
       
      
    } else return false

}
}
class Solution {//mine
    fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {
        val queue1: Queue<TreeNode> = ArrayDeque()
        p?.let { queue1 += p }
        val queue2: Queue<TreeNode> = ArrayDeque()
        q?.let { queue2 += q }     
        
       if ((p==null)&&(q!=null))
               return false
        if ((q==null)&&(p!=null))
               return false
        
        
        while (queue1.isNotEmpty()) {
            repeat (queue1.size) {
                val node1 = queue1.remove()
                val node2 = queue2.remove()
                
                if (node1.`val`!=node2.`val`)
               return false
            
                if ((node1.left!=null)&&(node2.left==null))
               return false 
                if ((node2.left!=null)&&(node1.left==null))
              return false
                if ((node1.right!=null)&&(node2.right==null))
               return false 
                if ((node2.right!=null)&&(node1.right==null))
               return false
               
                node1.left?.let { queue1 += it }
                node2.left?.let { queue2 += it }
                node1.right?.let { queue1 += it }                
                node2.right?.let { queue2 += it }

            }
           
        }
        
         return true
    }
}
