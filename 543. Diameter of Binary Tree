/**Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
Example 2:

Input: root = [1,2]
Output: 1
/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
class Solution {
      var max = 0;
    fun diameterOfBinaryTree(root: TreeNode?): Int {
        calculateHeight(root)
        return max
    }

    private fun calculateHeight(root: TreeNode?): Int {
        if (root == null) return 0
        val leftDepth = calculateHeight(root.left)
        val rightDepth = calculateHeight(root.right)
        max = maxOf(max, leftDepth + rightDepth)
        return maxOf(leftDepth, rightDepth) + 1
    }
   
}

   fun diameterOfBinaryTree(root: TreeNode?): Int {
        var max = 1

        fun dfs(root: TreeNode?): Int {
            if (root == null) return 0
            
            val left = dfs(root.left)
            val right = dfs(root.right)

            max = maxOf(max, left + right + 1)

            return maxOf(left, right) + 1
        }
        
        dfs(root)
        return max - 1
    }
