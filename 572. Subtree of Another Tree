/**
Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.
A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.
Example 1:
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
Example 2:
Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
 fun isSame(s: TreeNode?, t: TreeNode?): Boolean {
    if (s == null && t == null) return true
    if (s == null || t == null) return false
    if (s.`val` != t.`val`) return false

    return isSame(s.left, t.left) &&
           isSame(s.right, t.right)
}

fun isSubtree(s: TreeNode?, t: TreeNode?): Boolean {
    if (isSame(s, t)) return true
    
    return s != null && (isSubtree(s.left, t) || isSubtree(s.right, t))
}

class Solution {
    fun isSubtree(root: TreeNode?, subRoot: TreeNode?): Boolean {
        
        if (isSameTree(root, subRoot))
        return true
        
        return (root != null && (isSubtree(root!!.left, subRoot) || isSubtree(root!!.right, subRoot)))
        
       
    }   fun isSameTree(p: TreeNode?, q: TreeNode?): Boolean {
     if (p == null && q == null) return true

    if (p?.`val` == q?.`val`) {
       return isSameTree(p?.left, q?.left) && isSameTree(p?.right, q?.right)       
      
    } else return false

      }
}
