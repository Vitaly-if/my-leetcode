/**Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children. 

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: 2
Example 2:

Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
/**
 * Example:
 * var ti = TreeNode(5)
 * var v = ti.`val`
 * Definition for a binary tree node.
 * class TreeNode(var `val`: Int) {
 *     var left: TreeNode? = null
 *     var right: TreeNode? = null
 * }
 */
 
 class Solution {//recursive
    fun minDepth(root: TreeNode?): Int {
        return when {
            root == null -> 0
            root.right == null -> 1 + minDepth(root.left)
            root.left == null -> 1 + minDepth(root.right)
            else -> 1 + Math.min(minDepth(root.left), minDepth(root.right))
        }
    }
}
class Solution {
fun minDepth(root: TreeNode?): Int {
        var level = 1
        val queue: Queue<TreeNode> = ArrayDeque()
        root?.let { queue += root }
        while (queue.isNotEmpty()) {
            repeat (queue.size) {
                val node = queue.remove()
                if (node.left == null && node.right == null) return level
                node.left?.let { queue += it }
                node.right?.let { queue += it }
            }
            level++
        }     
        return 0
    }
}
class Solution { //mine
    fun minDepth(root: TreeNode?): Int {
           var ans: MutableList<Double> = ArrayList()
        if (root == null) {
            return 0
        }
        val q: Deque<TreeNode> = LinkedList()
        q.add(root)
        
        var depth = 1

        while (!q.isEmpty()) {
            var size: Int = q.size
            for (i in 0 until size) {
                val temp: TreeNode = q.pollFirst()

                if ((temp.left == null)&&(temp.right == null)) {
                    return depth
                }
                 if (temp.left != null)
                 q.add(temp.left)
                 
                 if (temp.right != null)
                 q.add(temp.right)                 
                
            }
            depth++           
        }        
         return 0
    }
}
