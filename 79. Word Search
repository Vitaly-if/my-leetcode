/*
Given an m x n grid of characters board and a string word, return true if word exists in the grid.
The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example 1:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
*/class Solution {
   fun exist(board: Array<CharArray>, word: String): Boolean {
    for (i in board.indices) {
        for (j in board[i].indices) {
            if (board[i][j] == word[0] && backtrack(board, word, 0, i, j)) return true
        }
    }
    return false
}

private fun backtrack(board: Array<CharArray>, word: String, index: Int, x: Int, y: Int): Boolean {
    board[x][y] = '_'
    if (index == word.lastIndex) return true
    val nextIndex = index + 1
    return when {
        isSafe(board, word[nextIndex], x - 1, y) && backtrack(board, word, nextIndex, x - 1, y) -> true // left
        isSafe(board, word[nextIndex], x + 1, y) && backtrack(board, word, nextIndex, x + 1, y) -> true // right
        isSafe(board, word[nextIndex], x, y - 1) && backtrack(board, word, nextIndex, x, y - 1) -> true // top
        isSafe(board, word[nextIndex], x, y + 1) && backtrack(board, word, nextIndex, x, y + 1) -> true // bottom
        else -> {
            board[x][y] = word[index]
            false
        }
    }
}
private fun isSafe(board: Array<CharArray>, char: Char, x: Int, y: Int) =
    x in board.indices && y in board[x].indices && board[x][y] == char
}
