/**
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

Example 1:

Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
**/
/**
 * Example:
 * var li = ListNode(5)
 * var v = li.`val`
 * Definition for singly-linked list.
 * class ListNode(var `val`: Int) {
 *     var next: ListNode? = null
 * }
 **/
class Solution {
    fun middleNode(head: ListNode?): ListNode? {
      var fast = head
      var slow = head
      while ((fast != null)&&(fast?.next != null)) {
           fast = fast?.next?.next            
           slow = slow?.next                                  
        } 
        return slow               
              }
               }
