/**
Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
Example 1:

Input: arr = [0,1,0]
Output: 1
Example 2:

Input: arr = [0,2,1,0]
Output: 1
Example 3:

Input: arr = [0,10,5,2]
Output: 1
 */
 class Solution { //O(log n)
    fun peakIndexInMountainArray(arr: IntArray): Int {
      var left = 0
        var right = arr.size - 1
        
        while(left <= right) {
            val middle = left + (right - left) /2
            if (arr[middle] < arr[middle + 1])
            left = middle + 1
            else right = middle -1
        }
        return left
    }
}
class Solution { //O(n)
    fun peakIndexInMountainArray(arr: IntArray): Int {
     for (i in 1 until arr.size)
        if (arr[i - 1] > arr[i]) return i - 1
    return -1
    }
}
