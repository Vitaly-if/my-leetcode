/*
Given an m x n matrix, return all elements of the matrix in spiral order.
Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 */
class Solution {
    fun spiralOrder(matrix: Array<IntArray>): List<Int> {
        val rows = matrix.size
        if (rows == 0) return emptyList()
        val cols = matrix[0].size
        if (cols == 0) return emptyList()
        
        var lowI = 0
        var highI = rows
        var lowJ = -1
        var highJ = cols
        var k = 0
        var i = 0
        var j = 0
        var dirI = 0
        var dirJ = 1
        val result = ArrayList<Int>(rows * cols)
        while (k < rows * cols) {
            // Check right bound
            if (dirJ == 1 && j == highJ) {
                dirJ = 0
                dirI = 1
                j--
                i++
                highJ--
            }
            // Check bottom bound
            else if (dirI == 1 && i == highI) {
                dirJ = -1
                dirI = 0
                j--
                i--
                highI--
            }
            // Check left bound
            else if (dirJ == -1 && j == lowJ) {
                dirJ = 0
                dirI = -1
                j++
                i--
                lowJ++
            }
            // Check top bound
            else if (dirI == -1 && i == lowI) {
                dirJ = 1
                dirI = 0
                j++
                i++
                lowI++
            }
            result.add(matrix[i][j])
            i += dirI
            j += dirJ
            k++
        }
        return result
    }
}
