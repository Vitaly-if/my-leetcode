/**Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]*/
class Solution {
   fun permute(nums: IntArray): List<List<Int>> {
	val result = mutableListOf<List<Int>>()
	backtrack(result, ArrayList(), nums.toMutableList())
	return result
}

private fun backtrack(result: MutableList<List<Int>>, tmpList: List<Int>, nums: MutableList<Int>) {
	if (nums.isEmpty()) {
		result.add(tmpList)
        println(tmpList)
		return
	}

	for (i in nums.indices) {
		val numsNew = ArrayList<Int>(nums).also {
			it.removeAt(i)
            println("i $i nums $nums nums[i] ${nums[i]} tmpList $tmpList numsNew ${it}")
		}

		backtrack(result, tmpList + nums[i], numsNew) // "+" creates copy of tmpList with appended nums[i] 
	}
}
}
