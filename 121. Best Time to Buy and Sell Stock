/**
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.**/
class Solution {
    fun maxProfit(prices: IntArray): Int {
         var sell = 0
       var min = prices[0]
       var max = 0  
       for (i in 0..prices.size-1){  
           val price = prices[i]
           sell = maxOf(sell, (price- min))
           min = minOf(price, min)
           }        
       return sell
    } 
}

class Solution {
    fun maxProfit(prices: IntArray): Int {
               
       var sell = 0
       var size = prices.size-1
       while(size>0) {
       var pos = 0
       var min = prices[0]
       var max = 0  
       for (i in 0..size){
           if (prices[i]<min) {
              min = prices[i] 
               pos = i + 1
           }           
         } 
       max = min
       for (i in pos..prices.size-1) {
            if (prices[i]>max) {
              max = prices[i] 
              }
       }
       if ((max > min) && (max-min > sell))
          sell = max-min  
           
           size--
    }
       return sell
    } 
}
